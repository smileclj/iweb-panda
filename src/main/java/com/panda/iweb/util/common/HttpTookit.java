package com.panda.iweb.util.common;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.httpclient.Header;import org.apache.commons.httpclient.HeaderElement;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.HttpMethod;import org.apache.commons.httpclient.HttpStatus;import org.apache.commons.httpclient.NameValuePair;import org.apache.commons.httpclient.URIException;import org.apache.commons.httpclient.methods.GetMethod;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.methods.multipart.FilePart;import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;import org.apache.commons.httpclient.methods.multipart.Part;import org.apache.commons.httpclient.methods.multipart.StringPart;import org.apache.commons.httpclient.params.HttpMethodParams;import org.apache.commons.httpclient.util.URIUtil;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;/** * HTTP工具箱 *  * @author leizhimin 2009-6-19 16:36:18 */public final class HttpTookit {	private static Log log = LogFactory.getLog(HttpTookit.class);	/**	 * 执行一个HTTP GET请求，返回请求响应的HTML	 * 	 * @param url	 *            请求的URL地址	 * @param queryString	 *            请求的查询参数,可以为null	 * @param charset	 *            字符集	 * @param pretty	 *            是否美化	 * @return 返回请求响应的HTML	 */	public static String doGet(String url, String queryString, String charset, boolean pretty) {		StringBuffer response = new StringBuffer();		HttpClient client = new HttpClient();		HttpMethod method = new GetMethod(url);		try {			if (null != queryString && !"".equals(queryString))				// 对get请求参数做了http请求默认编码，好像没有任何问题，汉字编码后，就成为%式样的字符串				method.setQueryString(URIUtil.encodeQuery(queryString));			client.executeMethod(method);			if (method.getStatusCode() == HttpStatus.SC_OK) {				BufferedReader reader = new BufferedReader(new InputStreamReader(method.getResponseBodyAsStream(), charset));				String line;				while ((line = reader.readLine()) != null) {					if (pretty)						response.append(line).append(System.getProperty("line.separator"));					else						response.append(line);				}				reader.close();			}		} catch (URIException e) {			log.error("执行HTTP Get请求时，编码查询字符串“" + queryString + "”发生异常！", e);		} catch (IOException e) {			log.error("执行HTTP Get请求" + url + "时，发生异常！", e);		} finally {			method.releaseConnection();		}		return response.toString();	}	/**	 * 执行一个HTTP POST请求，返回请求响应的HTML	 * 	 * @param url	 *            请求的URL地址	 * @param params	 *            请求的查询参数,可以为null	 * @param charset	 *            字符集	 * @param pretty	 *            是否美化	 * @return 返回请求响应的HTML	 */	public static String doPost(String url, Map<String, String> params, String charset, boolean pretty) {		StringBuffer response = new StringBuffer();		HttpClient client = new HttpClient();		HttpMethod method = new PostMethod(url);		// 设置Http Post数据		if (params != null) {			HttpMethodParams p = new HttpMethodParams();			for (Map.Entry<String, String> entry : params.entrySet()) {				p.setParameter(entry.getKey(), entry.getValue());			}			method.setParams(p);		}		try {			client.executeMethod(method);			if (method.getStatusCode() == HttpStatus.SC_OK) {				BufferedReader reader = new BufferedReader(new InputStreamReader(method.getResponseBodyAsStream(), charset));				String line;				while ((line = reader.readLine()) != null) {					if (pretty)						response.append(line).append(System.getProperty("line.separator"));					else						response.append(line);				}				reader.close();			}		} catch (IOException e) {			log.error("执行HTTP Post请求" + url + "时，发生异常！", e);		} finally {			method.releaseConnection();		}		return response.toString();	}	public static String uploadFile(String url, Map<String, String> params, Map<String, File> files) {		PostMethod postMethod = new PostMethod(url);		StringBuilder result = new StringBuilder();		BufferedReader in = null;		try {			int partLength = params == null ? files.size() : params.size() + files.size();			List<Part> partList = new ArrayList<Part>(partLength);			if (params != null) {				for (Map.Entry<String, String> entry : params.entrySet()) {					StringPart stringPart = new StringPart(entry.getKey(), entry.getValue());					stringPart.setCharSet("UTF-8");					partList.add(stringPart);				}			}			for (Map.Entry<String, File> entry : files.entrySet()) {				FilePart filePart = new FilePart(entry.getKey(), entry.getValue());				filePart.setCharSet("UTF-8");				partList.add(filePart);			}			MultipartRequestEntity post = new MultipartRequestEntity(partList.toArray(new Part[partLength]), postMethod.getParams());			postMethod.setRequestEntity(post);			HttpClient client = new HttpClient();			client.getHttpConnectionManager().getParams().setConnectionTimeout(5000);			int status = client.executeMethod(postMethod);			if (status == 200) {				in = new BufferedReader(new InputStreamReader(postMethod.getResponseBodyAsStream()));				String line = null;				while ((line = in.readLine()) != null) {					result.append(line);				}			} else {				log.error("文件上传失败");			}		} catch (IOException e) {			log.error("文件上传失败", e);		} finally {			postMethod.releaseConnection();		}		return result.toString();	}	public static void downloadFile(String url, Map<String, String> params) {		PostMethod postMethod = new PostMethod(url);		BufferedInputStream in = null;		BufferedOutputStream out = null;		try {			int partLength = params.size();			List<Part> partList = new ArrayList<Part>(partLength);			if (params != null) {				for (Map.Entry<String, String> entry : params.entrySet()) {					StringPart stringPart = new StringPart(entry.getKey(), entry.getValue());					stringPart.setCharSet("UTF-8");					partList.add(stringPart);				}			}			MultipartRequestEntity post = new MultipartRequestEntity(partList.toArray(new Part[partLength]), postMethod.getParams());			postMethod.setRequestEntity(post);			HttpClient client = new HttpClient();			client.getHttpConnectionManager().getParams().setConnectionTimeout(5000);			int status = client.executeMethod(postMethod);			if (status == 200) {				String fileName = null;				Header header = postMethod.getResponseHeader("Content-Disposition");				HeaderElement[] elements = header.getElements();				for (HeaderElement e : elements) {					NameValuePair pair = e.getParameterByName("fileName");					if (pair != null) {						fileName = pair.getValue();					}				}				String path = "d:\\" + fileName;				in = new BufferedInputStream(postMethod.getResponseBodyAsStream());				out = new BufferedOutputStream(new FileOutputStream(path));				byte[] buff = new byte[1024];				int b = 0;				while ((b = in.read(buff)) != -1) {					out.write(buff, 0, b);				}				out.flush();			} else {				log.error("文件下载失败");			}		} catch (IOException e) {			log.error("文件下载失败", e);		} finally {			postMethod.releaseConnection();			if (in != null) {				try {					in.close();				} catch (IOException e) {					log.error("文件下载失败", e);				}			}			if (out != null) {				try {					out.close();				} catch (IOException e) {					log.error("文件下载失败", e);				}			}		}	}	public static void main(String[] args) {		// String url =		// "http://localhost:8080/maven-file-service/file/service/uploadForRename.json";		// Map<String, File> files = new HashMap<String, File>();		// File file = new File("C:\\Users\\wana\\Desktop\\test\\1.txt");		// files.put("file", file);		// System.out.println(HttpTookit.uploadFile(url, null, files));		String url = "http://localhost:8080/maven-file-service/file/service/downloadFile.json";		Map<String, String> params = new HashMap<String, String>();		params.put("resourceId", "879518-8baff3f4578343ab9613e31fd1c384d6");		HttpTookit.downloadFile(url, params);	}}