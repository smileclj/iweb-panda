package com.panda.iweb.util.common;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import org.apache.commons.httpclient.Header;import org.apache.commons.httpclient.HeaderElement;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.HttpStatus;import org.apache.commons.httpclient.NameValuePair;import org.apache.commons.httpclient.URIException;import org.apache.commons.httpclient.methods.GetMethod;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.methods.multipart.FilePart;import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;import org.apache.commons.httpclient.methods.multipart.Part;import org.apache.commons.httpclient.methods.multipart.StringPart;import org.apache.commons.httpclient.util.URIUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public final class HttpTookit {	private static final Logger logger = LoggerFactory.getLogger(HttpTookit.class);	public static String joinParams(Map<String, Object> params) {		if (params == null || params.size() == 0) {			return "";		}		StringBuilder sb = new StringBuilder();		for (Map.Entry<String, Object> entry : params.entrySet()) {			sb.append(entry.getKey()).append("=").append(entry.getValue().toString()).append("&");		}		return sb.toString().substring(0, sb.toString().length() - 1);	}	public static String get(String url, Map<String, Object> params) {		String result = "";		HttpClient client = new HttpClient();		GetMethod method = new GetMethod(url);		String paramString = null;		try {			paramString = joinParams(params);			method.setQueryString(URIUtil.encodeQuery(paramString));			client.executeMethod(method);			if (method.getStatusCode() == HttpStatus.SC_OK) {				result = method.getResponseBodyAsString();			}		} catch (URIException e) {			logger.error("执行HTTP Get请求时，编码查询字符串“" + paramString + "”发生异常！", e);		} catch (IOException e) {			logger.error("执行HTTP Get请求" + url + "时，发生异常！", e);		} finally {			method.releaseConnection();		}		return result;	}	public static String post(String url, Map<String, Object> params) {		String result = "";		HttpClient client = new HttpClient();		PostMethod method = new PostMethod(url);		if (params != null && params.size() > 0) {			NameValuePair[] pairs = new NameValuePair[params.size()];			int i = 0;			for (Map.Entry<String, Object> entry : params.entrySet()) {				pairs[i] = new NameValuePair(entry.getKey(), entry.getValue().toString());				i++;			}			method.setRequestBody(pairs);		}		try {			client.executeMethod(method);			if (method.getStatusCode() == HttpStatus.SC_OK) {				result = method.getResponseBodyAsString();			}		} catch (IOException e) {			logger.error("执行HTTP Post请求" + url + "时，发生异常！", e);		} finally {			method.releaseConnection();		}		return result;	}	public static String uploadFile(String url, Map<String, String> params, Map<String, File> files) {		PostMethod postMethod = new PostMethod(url);		StringBuilder result = new StringBuilder();		BufferedReader in = null;		try {			int partLength = params == null ? files.size() : params.size() + files.size();			List<Part> partList = new ArrayList<Part>(partLength);			if (params != null) {				for (Map.Entry<String, String> entry : params.entrySet()) {					StringPart stringPart = new StringPart(entry.getKey(), entry.getValue());					stringPart.setCharSet("UTF-8");					partList.add(stringPart);				}			}			Set<Map.Entry<String, File>> set = files.entrySet();			Iterator<Map.Entry<String, File>> it = set.iterator();			while (it.hasNext()) {				Map.Entry<String, File> entry = it.next();				FilePart filePart = new FilePart(entry.getKey(), entry.getValue());				filePart.setCharSet("UTF-8");				partList.add(filePart);			}			MultipartRequestEntity post = new MultipartRequestEntity(partList.toArray(new Part[partLength]), postMethod.getParams());			postMethod.setRequestEntity(post);			HttpClient client = new HttpClient();			client.getHttpConnectionManager().getParams().setConnectionTimeout(5000);			int status = client.executeMethod(postMethod);			if (status == 200) {				in = new BufferedReader(new InputStreamReader(postMethod.getResponseBodyAsStream()));				String line = null;				while ((line = in.readLine()) != null) {					result.append(line);				}			} else {				logger.error("文件上传失败");			}		} catch (IOException e) {			logger.error("文件上传失败", e);		} finally {			postMethod.releaseConnection();		}		return result.toString();	}	public static String downloadFile(String url, Map<String, String> params, String folderPath) {		String filePath = "";		PostMethod postMethod = new PostMethod(url);		BufferedInputStream in = null;		BufferedOutputStream out = null;		try {			int partLength = params.size();			List<Part> partList = new ArrayList<Part>(partLength);			if (params != null) {				for (Map.Entry<String, String> entry : params.entrySet()) {					StringPart stringPart = new StringPart(entry.getKey(), entry.getValue());					stringPart.setCharSet("UTF-8");					partList.add(stringPart);				}			}			MultipartRequestEntity post = new MultipartRequestEntity(partList.toArray(new Part[partLength]), postMethod.getParams());			postMethod.setRequestEntity(post);			HttpClient client = new HttpClient();			client.getHttpConnectionManager().getParams().setConnectionTimeout(5000);			int status = client.executeMethod(postMethod);			if (status == 200) {				String fileName = null;				Header header = postMethod.getResponseHeader("Content-Disposition");				if (header != null) {					HeaderElement[] elements = header.getElements();					for (HeaderElement e : elements) {						NameValuePair pair = e.getParameterByName("fileName");						if (pair != null) {							fileName = pair.getValue();						}					}					filePath = folderPath + fileName;					in = new BufferedInputStream(postMethod.getResponseBodyAsStream());					out = new BufferedOutputStream(new FileOutputStream(filePath));					byte[] buff = new byte[1024];					int b = 0;					while ((b = in.read(buff)) != -1) {						out.write(buff, 0, b);					}					out.flush();				} else {					logger.warn("下载文件返回:{}", postMethod.getResponseBodyAsString());				}			} else {				logger.error("文件下载失败");			}		} catch (IOException e) {			logger.error("文件下载失败", e);		} finally {			postMethod.releaseConnection();			if (in != null) {				try {					in.close();				} catch (IOException e) {					logger.error("文件下载失败", e);				}			}			if (out != null) {				try {					out.close();				} catch (IOException e) {					logger.error("文件下载失败", e);				}			}		}		return filePath;	}	public static void main(String[] args) {		String url = "http://localhost:8080/portal/wechat/game/rpc/getShareConfigList.json";		Map<String, Object> params = new HashMap<String, Object>();		params.put("pageNumber", 1);		params.put("pageSize", 10);		System.out.println(get(url, params));		System.out.println(post(url, params));	}}